import React, { useState } from 'react';
import { ConfidenceScore } from '../types';

interface ConfidenceIndicatorProps {
  confidence: ConfidenceScore;
  showDetails?: boolean;
  compact?: boolean;
}

const ConfidenceIndicator: React.FC<ConfidenceIndicatorProps> = ({ 
  confidence, 
  showDetails = false, 
  compact = false 
}) => {
  const [expanded, setExpanded] = useState(false);

  const getConfidenceColor = (level: string) => {
    switch (level.toLowerCase()) {
      case 'high':
        return 'text-green-400 bg-green-900/30 border-green-600/50';
      case 'medium':
        return 'text-yellow-400 bg-yellow-900/30 border-yellow-600/50';
      case 'low':
        return 'text-red-400 bg-red-900/30 border-red-600/50';
      default:
        return 'text-gray-400 bg-gray-900/30 border-gray-600/50';
    }
  };

  const getScoreBarColor = (score: number) => {
    if (score >= 0.8) return 'bg-green-500';
    if (score >= 0.6) return 'bg-yellow-500';
    return 'bg-red-500';
  };

  const formatScore = (score: number) => Math.round(score * 100);

  if (compact) {
    return (
      <div className="flex items-center gap-2">
        <div className={`px-2 py-1 rounded text-xs font-medium border ${getConfidenceColor(confidence.level)}`}>
          {confidence.level.toUpperCase()}
        </div>
        <div className="text-xs text-gray-400">
          {formatScore(confidence.score)}%
        </div>
      </div>
    );
  }

  return (
    <div className="bg-gray-800/50 rounded-lg p-3 border border-gray-700/50">
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center gap-3">
          <div className={`px-3 py-1 rounded-full text-sm font-medium border ${getConfidenceColor(confidence.level)}`}>
            <i className="fas fa-chart-line mr-1"></i>
            {confidence.level.charAt(0).toUpperCase() + confidence.level.slice(1)} Confidence
          </div>
          <div className="text-lg font-bold text-white">
            {formatScore(confidence.score)}%
          </div>
        </div>
        
        {(confidence.uncertainty_factors.length > 0 || showDetails) && (
          <button
            onClick={() => setExpanded(!expanded)}
            className="text-gray-400 hover:text-white transition-colors"
          >
            <i className={`fas fa-chevron-${expanded ? 'up' : 'down'}`}></i>
          </button>
        )}
      </div>

      {/* Progress Bar */}
      <div className="w-full bg-gray-700 rounded-full h-2 mb-2">
        <div 
          className={`h-2 rounded-full transition-all duration-300 ${getScoreBarColor(confidence.score)}`}
          style={{ width: `${formatScore(confidence.score)}%` }}
        ></div>
      </div>

      {/* Reasoning */}
      <p className="text-sm text-gray-300 mb-2">{confidence.reasoning}</p>

      {/* Expanded Details */}
      {expanded && (
        <div className="mt-3 pt-3 border-t border-gray-700/50">
          {confidence.uncertainty_factors.length > 0 && (
            <div className="mb-3">
              <h4 className="text-sm font-medium text-yellow-400 mb-2">
                <i className="fas fa-exclamation-triangle mr-1"></i>
                Uncertainty Factors
              </h4>
              <ul className="text-sm text-gray-300 space-y-1">
                {confidence.uncertainty_factors.map((factor, index) => (
                  <li key={index} className="flex items-start gap-2">
                    <span className="text-yellow-400 mt-0.5">â€¢</span>
                    <span>{factor}</span>
                  </li>
                ))}
              </ul>
            </div>
          )}

          <div className="text-xs text-gray-500 bg-gray-900/50 rounded p-2">
            <i className="fas fa-info-circle mr-1"></i>
            <strong>Note:</strong> This confidence score is generated by AI analysis and should not replace professional medical judgment. 
            Always consult with healthcare providers for medical decisions.
          </div>
        </div>
      )}
    </div>
  );
};

export default ConfidenceIndicator; 